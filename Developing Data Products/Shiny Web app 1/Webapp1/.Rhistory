library(MASS)
library(ISLR)
install.packages("ISLR")
names(Boston)
?Boston
plot(medv~lstat,data=Boston)
fit1=lm(medv~lstat,data=Boston)
fit1
summary(fit1)
abline(fit1,col="red")
confint(fit1)
predict(fit,data.frame(lstat=c(5,10,15)),interval="confidence")
predict(fit1,data.frame(lstat=c(5,10,15)),interval="confidence")
fit1=lm(medv~lstat+rad,data=Boston)
summary(fit1)
fit1=lm(medv~.,data=Boston)
summray(fit1)
summary(fit1)
par(mfrow(2,2))
par(mfrow=c(2,2))
plot(fit1)
fit4=update(fit3,~.-age-indus)
fit4=update(fit1,~.-age-indus)
summary(fit4)
fit5=lm(medv~lstat*age,Boston)
summary(fit5)
fit6=lm(medv~lstat + I(lstat^2),Boston)
plot(medv~lstat)
plot(medv~lstat,data=Boston)
par(mfrow=c(1,1))
plot(medv~lstat,data=Boston)
absline(fit6)
abline(fit6,col="red")
plot(medv~lstat,data=Boston)
points(lstat,fitted(fit6),col="red",pch=20)
attach(Boston)
points(lstat,fitted(fit6),col="red",pch=20)
summary(fit6)
points(lstat,fitted(fit6),col="red",pch=10)
points(lstat,fitted(fit6),col="red",pch=30)
points(lstat,fitted(fit6),col="red",pch=12)
points(lstat,fitted(fit6),col="red",pch=20)
fit7=lm(medv~poly(lstat,2))
clear
warnings()
fit7=lm(medv~poly(lstat,2))
points(lstat,fitted(fit7),col="blue",pch=20)
require(ISLR)
names(Smarket)
summary(Smarket)
?Smarket
pairs(Smarket,col=Smarket$Direction)
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,data=Smarket,family=binomial)
summary(glm.fit)
glm.probs=predict(glm.fit,type="response")
glm.probs[1:5]
glm.pred=ifelse(glm.probs>0.5,"Up","Down")
attach(Smarket)
table(glm.pred,Direction)
mean(glm.pred==Direction)
train=Year<2005
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,data=Smarket,family=binomial,susbet=train)
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,data=Smarket,family=binomial,subset=train)
glm.probs=predict(glm.fit,newdata=Smarket[!train],type="response")
glm.probs=predict(glm.fit,newdata=Smarket[!train,],type="response")
glm.pred=ifelse(glm.probs>0.5,"Up","Down")
Direction.2005=Smarket$direction[!train]
table(glm.pred,Direction.2005)
Direction.2005=Smarket$direction[!train]
table(glm.pred,Direction.2005)
Direction.2005=Smarket$Direction[!train]
table(glm.pred,Direction.2005)
require(ISLR)
require(MASS)
lda.fit=lda(Direction~Lag1+Lag2,data=Smarket,subset = Year<2005)
lda.fit
plot(lds.fit)
plot(lda.fit)
Smarket.2005=subset(Smarket,Year==2005)
lda.pred=predict(lda.fit,Smarket.2005)
data.frame(lda.pred)[1:5,]
class(lda.pred)
library(class)
?knn
Xlag=cbind(Lag1,Lag2)
train=year<2005
train=Year<2005
knn.pred=knn(Xlag[train,],Xlag[!train],Direction[train],k=1)
knn.pred=knn(Xlag[train,],Xlag[!train],,Direction[train],k=1)
knn.pred=knn(Xlag[train,],Xlag[!train,],Direction[train],k=1)
table(knn.pred,Direction[!train])
mean(knn.pred,Direction[!train])
mean(knn.pred==Direction[!train])
require(ISLR)
require(boot)
plot(mpg~horsepower,data=Auto)
glm.fit=glm(mpg~horsepower,data=Auto)
cv.glm(Auto,glm.fit)$delta
loocv=function(fit){
h=lm.influence(fit)$h
mean((residuals(fit)/(1-h))^2)
}
loocv(glm.fit)
cv.error=rep(0,5)
degree=1:5
for(d in degree){}
for(d in degree){
glm.fit=glm(mpg,poly(horsepower,d), data=Auto)
cv.error[d]=loocv(glm.fit)
}
for(d in degree){
glm.fit=glm(mpg~poly(horsepower,d), data=Auto)
cv.error[d]=loocv(glm.fit)
}
plot(degree,cv.error,type="b")
cv.error10=rep(0,5)
for(d in degree){
glm.fit=glm(mpg~poly(horsepower,d), data=Auto)
cv.error10[d]=cv.glm(Auto,glm.fit,K=10)$delta[1]
}
lines(degree,cv.error10,type="b",col="red")
alpha=function(x,y){
vx=var(x)
vy=var(y)
cxy=cov(x,y)
(vy-cxy)/(vx+vy-2*cxy)
}
alpha(Portfolio$X,Portfolio$Y)
alpha.fn=function(data,index){
with(data[index,],alpha(X,Y))
}
alpha.fn(Portfolio,1:100)
boot.out=boot(Portfolio,alpha.fn,R=1000)
plot(boot.out)
?lm
?plot
install.packages("shiny")
shiny::runApp('myApp')
runApp('myApp')
?builder
runApp('myApp')
shiny::runApp('myApp')
?selectInput
load(datasets)
library(datasets)
?barplot
Titanic
Titanic$Survived = "Yes"
titanic$survival <- titanic$survived == "yes"
Titanic$survival <- Titanic$survived == "yes"
table(Titanic$Survived)
table(Titanic$Survival)
Titanic
require(graphics)
mosaicplot(Titanic, main = "Survival on the Titanic")
## Higher survival rates in children?
apply(Titanic, c(3, 4), sum)
## Higher survival rates in females?
apply(Titanic, c(2, 4), sum)
clear
rm(list=ls())
library(datasets)
require(graphics)
mosaicplot(Titanic, main = "Survival on the Titanic")
## Higher survival rates in children?
apply(Titanic, c(3, 4), sum)
## Higher survival rates in females?
apply(Titanic, c(2, 4), sum)
?apply
Titanic[Sex]
Titanic$Sex
colnames(Titanic)
require(graphics)
mosaicplot(Titanic, main = "Survival on the Titanic")
## Higher survival rates in children?
apply(Titanic, c(3, 4), sum)
## Higher survival rates in females?
apply(Titanic, c(2, 4), sum)
Titanic
colnames(Titanic#Class)
;
colnames(Titanic$Class)
?c
colnames(Titanic)
Titanic[,Male]
Titanic[,"Male"]
WorldPhones[,"Asia"]
Titanic
Titanic[Sex="Male",Class="1st"]
data(Titanic$Sex)
data(Titanic)
Titanic$Sex
Titanic
Titanic$Age
Titanic[Age="Adult","Sex"=Female]
Titanic[Age="Adult",Sex="Female"]
Titanic[Age="Adult",Sex="Female",class="1st"]
Titanic[Age="Adult"]
Titanic[,"Sex"]
subset(TItanic,select=c(1:4,1:2,1,1))
subset(Titanic,select=c(1:4,1:2,1,1))
subset(Titanic,select=c(1,2,1,1))
Titanic
head(Titanic)
rm(list=ls())
library(datasets)
head(Titanic)
View(Titanic)
Titanic %>% group_by(Sex) %>% summarise(mean(Age))
load(Titanic)
load(Titanic)
data(Titanic)
Titanic %>% group_by(Sex) %>% summarise(mean(Age))
group_by(Titanic$Sex)
train$Survived <- as.factor(train$Survived)
Titanic$Survived <- as.factor(Titanic$Survived)
library(datasets)
?Titanic
colnames(Titanic)
Titanic
colnames(Worldphones)
colnames(WorldPhones)
row.names(Titanic)
Titanic[,2]
Titanic[1]
Titanic[0]
Titanic[2]
Titanic[2,0]
Titanic[2][0]
Titanic[,"Crew"]
WorldPhones
Titanic["Adult","Yes"]
Titanic["Adult"]
Titanic["Yes"]
Titanic["Male"]
rm
rm(ls())
train <- read.csv("~/Documents/Workspace/Github/my-mooc-workspace/Developing_Data_Products/Shiny Web app 1/train.csv")
View(train)
train
colnames(train)
as.factor(train$sex)
rownames(train$sex)
row.names(train$sex)
prop(table(train$sex,train$pclass))
prop.table(table(train$sex,train$pclass))
colnames(train$sex)
levels(train$sex)
train[,"male"]
train[1,"male"]
train
table < - prop.table(table(train$sex,train$pclass))
table1 < - prop.table(table(train$sex,train$pclass))
table1 <- prop.table(table(train$sex,train$pclass))
table1["male",1]
tabl1
table1
table1 <- prop.table(table(train$sex,train$pclass,train$survived))
table1
table1["male",1,0]
table1["male",1]
table1["male",1,1]
table1["male",1,2]
table1["male",,1]
?barplot
y= "hi"
y + "how"
paste(y,"yolo")
?Titanic
shiny::runApp('Documents/Workspace/Github/my-mooc-workspace/Developing_Data_Products/Shiny Web app 1/Webapp1')
pwd()
runApp('Documents/Workspace/Github/my-mooc-workspace/Developing_Data_Products/Shiny Web app 1/Webapp1')
train$sex.level
str(levels(train$sex))
runApp('Documents/Workspace/Github/my-mooc-workspace/Developing_Data_Products/Shiny Web app 1/Webapp1')
runApp('Documents/Workspace/Github/my-mooc-workspace/Developing_Data_Products/Shiny Web app 1/Webapp1')
runApp('Documents/Workspace/Github/my-mooc-workspace/Developing_Data_Products/Shiny Web app 1/Webapp1')
typeof(levels(train$sex))
levels(tr)
levels(trains$sex)
levels(train$sex)
levels(train$sex)[0]
levels(train$sex)[1]
levels(train$sex)[2]
type(levels(train$sex))
typeof(levels(train$sex))
runApp('Documents/Workspace/Github/my-mooc-workspace/Developing_Data_Products/Shiny Web app 1/Webapp1')
typeof(colnames(train))
typeof(levels(train$pclass))
train$pclass
runApp('Documents/Workspace/Github/my-mooc-workspace/Developing_Data_Products/Shiny Web app 1/Webapp1')
runApp('Documents/Workspace/Github/my-mooc-workspace/Developing_Data_Products/Shiny Web app 1/Webapp1')
runApp('Documents/Workspace/Github/my-mooc-workspace/Developing_Data_Products/Shiny Web app 1/Webapp1')
typeof(colnames(train))
?sidebarLayout
runApp('Documents/Workspace/Github/my-mooc-workspace/Developing_Data_Products/Shiny Web app 1/Webapp1')
runApp('Documents/Workspace/Github/my-mooc-workspace/Developing_Data_Products/Shiny Web app 1/Webapp1',display.mode = "showcase")
shiny::runApp('Documents/Workspace/Github/my-mooc-workspace/Developing_Data_Products/Shiny Web app 1/Webapp1')
